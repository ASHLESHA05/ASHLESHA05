
#include<stdio.h>
#include<stdlib.h>
typedef struct node
{
  int ele;
  struct node *next;
}NODE;
//******************************************
NODE *create(int ele)
{
  NODE *newnode=malloc(sizeof(NODE));
  newnode->ele=ele;
  newnode->next=NULL;
  return newnode;
}
//*******************************************
NODE *insert_front(NODE *head,int ele)
{
  NODE *newnode=create(ele);
  newnode->next=head;
  head=newnode;
  return head;
}
//*******************************************
void display(NODE *head)
{ 
  printf("\n");  
  NODE *p=head;
  while(p!=NULL)
  {
    printf("%d ",p->ele);
    p=p->next;
  }

  printf("\n");
}
//********************************************
NODE *delete_front(NODE *head)
{
  NODE *p=head;
  head=(head)->next;
  free(p);
  return head;
}
//********************************************
NODE *insert_last(NODE *head,int ele)
{
  NODE *newnode=create(ele);
  NODE *p=head;
  while(p->next!=NULL)
    p=p->next;
  p->next=newnode;
  return head;  
}
//*********************************************
NODE *delete_last(NODE *head)
{
  NODE *p=head;
  NODE *temp=head;
  if((head)->next==NULL)
  {
   p=head;
   head=NULL;
   free(p); 
   return head;
  }
  else{

  while(p->next!=NULL)
  {
    temp=p;
    p=p->next;
  }
  temp->next=NULL;
  free(p);
}}
//**********************************************
int size(NODE *head)
{
  NODE *p=head;
  int i=0;
  while(p->next!=NULL)
  {
    i++;
    p=p->next;
  }
  printf("size id :%d\n",i+1);
  return(1+i);
}
//**********************************************
NODE *insert_middle(NODE *head,int ele,int pos)
{
  int len=size(head);
  if(head==NULL)
  {
    head=create(ele);
    return head;
  }
  else{
    NODE *newnode=create(ele);
    NODE *p=head;
    while(pos-- >1)
      p=p->next;
    newnode->next=p->next;
    p->next=newnode;
    return head;  

  }
}

//********************************************************************
NODE *delete_middle(NODE *head,int ele)
{ 
  if(ele==0){
      head=delete_front(head);
      return head;
}
  else if(size(head)-1 >=ele)
  {
    NODE *p=head,*temp;
    int i=0;
    while(i!=ele)
    {
       temp=p;
       p=p->next;
       i++;
    }
    temp->next=p->next;
    free(p);
  }
  else
    printf("Invalid position entered \n");
}


int main()
{
  NODE *head=NULL;
  int n,ele,pos;
  do{
    printf("1.insert_front front\n2.display\n3.delete_front\n4.insertlast\n5.deletelast\n6.insert middle\n7.delete frm middle\n0exit\n");
    scanf("%d",&n);
    switch(n)
    { 
        case 1:
          printf("enter the elements");
          scanf("%d",&ele);
          head=insert_front(head,ele);
          break;

        case 2:
          if(head!=NULL)
          display(head);
          else
           printf("empty list\n"); 
          break;

        case 3:
          if(head!=NULL)
           head=delete_front(head);
          else 
            printf("Empty list");  
          break;

        case 4:
           printf("enter element:  ");
           scanf("%d",&ele);
           head=insert_last(head,ele);
           break;

        case 5:
          if(head!=NULL)
           head=delete_last(head);
          else 
            printf("Empty list");  
          break;  
        case 6:
           printf("enter the element and position");
           scanf("%d%d",&ele,&pos);
          if(size(head)>=pos)
           head=insert_middle(head,ele,pos);
          else 
            printf("\nInvalid position\n");
           break;
        case 7:
           if(head==NULL)
           printf("empty list\n");
           else
           {
            printf("enter the position u want to pop");
            scanf("%d",&ele);
            if(size(head)>=pos)
            head=delete_middle(head,pos);
            else
             printf("\nInvalid position\n");
            break;
           }
                            
    }
  }while(n<=7 && n>=1);
}
